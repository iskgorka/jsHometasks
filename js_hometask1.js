"use strict"
console.log('number' + 3 + 3);
/* Результат number33
Це конкатенація строк, js автоматично перетворює 3 в тип данних String і об'єднує його з number і так само вдруге
*/
console.log(null + 3);
/*
Результат 3
Коли null додається до числа, то null автоматично стає 0 з типом Number
*/
console.log(5 && "qwerty");
/*
Результат qwerty
в JS - && це логічний оператор і (та). Якщо 5 це true, і "qwerty" теж тру, тому результатом буде другий операнд який true
*/
console.log(+'40' + +'2' + "hillel");
/* Результат 42hillel
Спочатку +'40' стане числом 40, потім так само з 2, числа сумуются = 42, а потім до числа 42 додасться радок hillel, конкатенація
*/
console.log('10' - 5 === 6);
/* Результат false
автоматично 10 стає числом: 10-5 = 5 < 6 значить false
*/
console.log(true + false);
/* Результат 1
true = 1, false = 0, 0 + 1 = 1
*/
console.log('4px' - 3);
/* Результат NaN
Рядок '4px' не може бут автоматично переведений в число через px
*/
console.log('4' - 3);
/* Результат 1 
4 перетворюється в число
*/
console.log('6' + 3 ** 0);
/* Результат 61
Спочатку 3 в ступені 0 буде 1, потім конкатенація строка 6 + число 1 буде строка 61
*/
console.log(12 / '6');
/* Результат 2
Строка 6 стає числом і відбувається ділення 
*/
console.log('10' + (5 === 6));
/* Результат 10false
Спочатку 5 < 6 значить false потім конкатенація строка 10 + булиан false = 10false
*/
console.log(null == '');
/* Результат false
null не дорівнює пустому рядку, тому false
*/
console.log(3 ** (9 / 3));
/* Результат 27
Спочатку 9 поділити на 3 це 3, потім 3 в степіні 3 = 27
*/
console.log(!!'false' == !!'true');
/* Результат true
Строка 'false' за подомогою оператора !! перетворюється в булевий тип true, оскільки строка непорожня.
!!'false' перетворюється в булево true оскільки будь-який непорожній рядок, включаючи 'false', вважається істинним, 
Аналогічно, !!'true' також перетворюється в true.
true == true буде true
*/
console.log(0 || '0' && 1);
/* Результат 1
спочатку '0' && 1: '0' непорожній тому він тру, оскільки вирази тру і тру, результатом буде другий операнд 1 
0 || 1
0 рахується як фолс, а оскільки один із операндів тру (1), тому результат будет другий операнд 1
*/
console.log((+null == false) < 1);
/* Результат false
спочатку +null == false: +null перетворюється на 0, а фолс це і є 0, тобто 0 == 0 це тру
тру < 1 тому що дорівнює йому, тому результат фолс
*/
console.log(false && true || true);
/* Результат true
спочатку false && true оскільки вище пріорітет, результат false
потім false || true оскільки другий операнд істина результат буде true
*/
console.log(false && (false || true));
/* Результат false
спочатку false || true поверне true, оскільки один з операндів (true) є істинним
потім false && true: false, оскільки один з операндів є false
*/
console.log((+null == false) < 1 ** 5);
/* Результат false
спочатку +null == false: +null стає числом 0, false це і є 0, результат true
потім 1 ** 5 це 1
потім true < 1, це false оскільки вони рівні
*/